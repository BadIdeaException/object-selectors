{
	const MODE_NORMAL = 0;
	const MODE_STRICT = 1;
	const MODE_LENIENT = 2;
}

/*
 * A selector is either the empty selector, or a series of property descriptors separated by the accessor operator ('.')
 */
Selector 
	= Empty_selector /
	selector:(head:Property_descriptor tail:Accessor_selector* { 
		
		return [ 
			...head,  		// Spread operator: property descriptors are parsed as arrays (because they might include conditions)
			...tail.flat()	// Spread operator: the tail is an array of Accessor_selectors because of the asterisk operator
							// flat(): accessor selectors are themselves arrays as well (see their parse return value)
		]; 
	}) {
		// Return value is the function select, but we will set some meta-properties of the selector on it:
		// - Whether or not the selector is ambiguous
		// - The raw source text of the selector
		return Object.assign(function select(obj, references, mode) {
			const resolution = [
				{ target: obj, selection: [] }
			]
			selector?.forEach(element => element(resolution, references, mode));
			return resolution;
		}, { 
			// The selector as a whole is ambiguous if at least one of its constituents is ambiguous (multi-valued)
			ambiguous: selector.some(fn => fn.ambiguous),
			source: text()
		});
	};

Empty_selector
	= &{ return input === '' } {
		return Object.assign(function empty(obj) { 
			return [ { target: { obj }, selection: [ 'obj' ] } ];
		}, {
			ambiguous: false,
			source: text()
		});
	}

Accessor_selector 
	= accessor:Accessor property:Property_descriptor { 
		return [ accessor, ...property ]
	};
	
Accessor 
	= "." {
		return function access(resolution) {
			let result = [];
			for (let item of resolution) {
				result = result.concat(item.selection.map(property => ({
					target: item.target[property],
					selection: []
				})));
			}
			resolution.splice(0, resolution.length, ...result); // Work in-place
		}
	};

/*
 * A property descriptor is a property name (which may include wildcards, see below) optionally followed by
 * a series of conditions.
 */
Property_descriptor 
	= property:Property_name condition:Condition* { 
		return [ 
			property, 
			...condition, 
			function validate(resolution, references, mode = MODE_NORMAL) {
				if (mode) {
					// Run through the current resolutions backwards, because we may be changing them
					for (let i = resolution.length - 1; i >= 0; i--) {
						// There is an "invalid" resolution if
						// - no matching selections were found
						// - or a set selection does not exist on the target
						for (let j = resolution[i].selection.length - 1; j >= 0; j--) {
							if (!(resolution[i].selection[j] in resolution[i].target)) {
								switch(mode) {
									// In strict mode, throw an error
									case MODE_STRICT: throw new TypeError(`Object has no properties matching ${text()}`);
									// In lenient mode, remove the offending selection	
									case MODE_LENIENT: resolution[i].selection.splice(j, 1);
								}
							}
						}
						// If after removing all offending selections none are left, remove the entire resolution in lenient
						// mode or throw in strict mode
						if (resolution[i].selection.length === 0)
							switch (mode) {
								case MODE_STRICT: throw new TypeError(`Object has no properties matching ${text()}`)
								case MODE_LENIENT: resolution.splice(i, 1);
							}
					}
				}
			} 
		] 
	};

/*
 * A property name is an identifier, or a property name with wildcards.
 */
Property_name
	= regex:Property_name_with_wildcard {
		// Wildcard selectors are always ambiguous
		return Object.assign(function selectByRegex(resolution) {
			for (let item of resolution) {
				item.selection = Object.keys(item.target).filter(key => regex.test(key))
			}
		}, { ambiguous: true });
	} 
	/ name:Identifier {
		return function selectByName(resolution) {
			resolution.forEach(item => item.selection = [ name ]);
		}          
	}

/*
 * A condition is a unary condition or a binary condition, enclosed in square brackets. 
 * There may be whitespace between the opening and closing brackets and the actual condition expression.
 */
Condition 
	= "[" _* condition:(UnaryCondition / BinaryCondition) _* "]" {
		return function selectByCondition(resolution, references, mode) {
			const { selector, operator, valueFn } = condition;
			const value = valueFn(references);
			for (let item of resolution) 				
				item.selection = item.selection.filter(selectedProperty => {
					// Normalize condition selector from tuples (target, multiple selections) to 
					// (target, single selection)
					const conditionProperties = selector(item.target[selectedProperty], references, mode)
						.flatMap(({ target, selection }) => selection.map(conditionProperty => ({ target, conditionProperty })));

					return conditionProperties.length > 0 && conditionProperties.every(({ target, conditionProperty }) => operator(target[conditionProperty], value));
				});
		}
	};
/*
 * A unary condition is a condition that does not have an operator and a value.
 * It consists only of a property name.
 */
UnaryCondition 
	= !BinaryCondition selector:Selector {
		return { selector, operator: Boolean, valueFn: () => null };
	};
/*
 * A binary condition is a condition that has an operator and a value.
 * It is of the form <property> <operator> <value>, where <operator> may be one of the
 * following: ===, ==, $=, ^=, ~=, <, >=, <=, or <
 */
BinaryCondition 
	= selector:Selector _* operator:Operator _* valueFn:Value {     	
		if (operator.name === '~=') {
			let _valueFn = valueFn;
			valueFn = references => new RegExp(_valueFn(references));
		}		
		return { selector, operator, valueFn };
	};
Operator
	= operator:("===" / "==" / "$=" / "^=" / "~=" / ">=" / "<=" / ">" / "<") {
		return {
			'==': (a,b) => a == b,
			'===': (a,b) => a === b,
			'$=': (a,b) => a?.endsWith(b),
			'^=': (a,b) => a?.startsWith(b),
			'~=': (a,b) => b.test(a),
			'>': (a,b) => a > b,
			'>=': (a,b) => a >= b,
			'<=': (a,b) => a <= b,
			'<': (a,b) => a < b
		}[operator];
	}
Value = ReferenceValue / LiteralValue;

ReferenceValue
	= Reference_character reference:Identifier {
		// Return a function that resolves the reference against the passed references object
		return references => references[reference];
	};
Reference_character = "@";
LiteralValue 
	= identifier: Identifier { 
		// Return a constant function that returns identifier, so as to present the same interface as a reference value
		return () => identifier; 
	};
Identifier 
	= symbols:Symbol+ { return symbols.join(''); }; 
	// Can't just do $Symbol because then we lose the ability to ignore the escape character

/*
 * A property name is, conceptually, a series of identifiers separated by single wildcards, with an optional single 
 * wildcard at the beginning and the end. There must be at least one wildcard.
 */
Property_name_with_wildcard = 
	&(Identifier? Wildcard) // Make sure there is at least one wildcard to avoid ambiguity with rule Identifier
	descriptor:(Wildcard? (Identifier Wildcard?)*  Wildcard?)
	{ return new RegExp('^' + descriptor.flat(Infinity).join('') + '$') };
Wildcard 
	= !"**" // Series of wildcards are allowed except series of asterisks
	wildcard:("*" / "?") {
		switch (wildcard) {
			case '*': return '\\w*';
			case '?': return '\\w';
		}
	}


Permitted_character 
	= [A-Za-z0-9_];
Reserved_character 
	= $(Accessor / "+" / "~" / "[" / "]" / Wildcard / Escape_character / Reference_character / Operator / _);
Escape_character 
	= "\\";
/* A Symbol is a permitted character, or an escaped reserved character */
Symbol 
	= Escape_character char:Reserved_character { return char; }
	/ Permitted_character;
_ "whitespace" 
	= [ \t] { return; }
